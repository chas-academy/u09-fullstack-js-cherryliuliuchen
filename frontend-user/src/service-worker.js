// src/service-worker.js

// Import the precacheAndRoute method from Workbox
import { precacheAndRoute } from 'workbox-precaching';

// Use precacheAndRoute to handle __WB_MANIFEST injected by the Workbox plugin
// __WB_MANIFEST is a resource list automatically generated by Workbox during the build process
/* eslint-disable-next-line no-restricted-globals */
precacheAndRoute(self.__WB_MANIFEST);

// Handle events during the installation phase
/* eslint-disable-next-line no-restricted-globals */
self.addEventListener('install', (event) => {
  console.log('Service Worker installing.');
  /* eslint-disable-next-line no-restricted-globals */
  self.skipWaiting(); // Skip waiting and activate the new Service Worker immediately
});

// Handle events in the activation phase and clear the old cache
/* eslint-disable-next-line no-restricted-globals */
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating.');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== 'my-site-cache-v1') {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  /* eslint-disable-next-line no-restricted-globals */
  self.clients.claim(); // Take control of all clients
});

// Intercept fetch requests and use cache-first strategy
/* eslint-disable-next-line no-restricted-globals */
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      // If a matching response is found in the cache, use it
      if (response) {
        return response;
      }
      // Otherwise, make a network request and cache the response
      return fetch(event.request).then((networkResponse) => {
        return caches.open('my-site-cache-v1').then((cache) => {
          cache.put(event.request, networkResponse.clone());
          return networkResponse;
        });
      });
    }).catch(() => {
      // If both the cache and network fail, return the offline page
      return caches.match('/offline.html');
    })
  );
});
